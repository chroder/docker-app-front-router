worker_processes auto;
error_log /usr/local/openresty/nginx/logs/error.log $LOG_LEVEL;

events {
    worker_connections 10000;
}

http {
    lua_package_path "/usr/local/openresty/nginx/?.lua;;";

    include       mime.types;
    default_type  application/octet-stream;

    log_format jsonlog escape=json '{"time": "$time_iso8601", "host": "$host", '
        '"request_uri": "$request_uri", "request_method": "$request_method", "request_size": "$request_length", '
        '"response_status": "$status", "response_size": "$bytes_sent", '
        '"backend": "$proxyPassUrl", "backend_time": "$upstream_response_time", "request_time": "$request_time", '
        '"remote_addr": "$realip_remote_addr", "referrer": "$http_referer", "user_agent": "$http_user_agent" }';

    access_log /usr/local/openresty/nginx/logs/access.log jsonlog;

    keepalive_timeout  65;
    etag off;
    resolver $NAMESERVER ipv6=off;

    init_by_lua_block {
        AFR_REDIS_HOST = "$AFR_REDIS_HOST"
        AFR_REDIS_PORT = tonumber("$AFR_REDIS_PORT")
        AFR_CACHE_SIZE = tonumber("$AFR_CACHE_SIZE")
        AFR_CACHE_TIME = tonumber("$AFR_CACHE_TIME")
        AFR_REDIS_KEY_PREFIX = "$AFR_REDIS_KEY_PREFIX"
        AFR_PROXY_URL_VALUE_KEY = "$AFR_PROXY_URL_VALUE_KEY"
        AFR_PASS_LOOKUP_HEADER = "$AFR_PASS_LOOKUP_HEADER"
        AFR_SET_X_FWD_HEADERS = "$AFR_SET_X_FWD_HEADERS"
    }

    server {
        listen 8080;
        listen 8433; # upstream can use this to indicate https with AFR_SET_X_FWD_HEADERS

        location / {
            set $proxyPassUrl ''; # is set from lua script
            access_by_lua_file lookup.lua;

            proxy_pass $proxyPassUrl;
        }
    }

    server {
        listen 8111;
        location / {
            set $proxyPassUrl ''; # set because its used in log format
            stub_status;
        }
    }
}
